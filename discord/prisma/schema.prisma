// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? // @db.Text
  access_token       String? // @db.Text
  expires_at         Int?
  refresh_token_expires_at Int?
  token_type         String?
  scope              String?
  id_token           String? // @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  firstName     String?
  lastName      String?
  name          String?
  userName      String?  @unique
  password      String?
  email         String   @unique
  emailVerified DateTime?
  phoneNumber   String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  following     Follow[] @relation("following")
  followed      Follow[] @relation("followed")
  posts         Post[]
  likes         Like[]
  replies       Reply[]
  notifications Notification[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Follow {
  id           String @id @default(cuid())
  following    User  @relation("following",fields: [followingId], references: [id], onDelete: Cascade)
  followingId  String
  followed     User  @relation("followed",fields: [followedId], references: [id], onDelete: Cascade)
  followedId   String
}

model Post {
  id           String @id @default(cuid())
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  postImage    String?
  title        String?
  description  String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  tags         PostTags[]
  likes        Like[]
  replies      Reply[]
}

model PostTags {
  id           String @id @default(cuid())
  post         Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId       String
  tag          String
}

model Like {
  id           String @id @default(cuid())
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  post         Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId       String
}

model Reply {
  id          String @id @default(cuid())
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  post         Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId       String
  content      String
  created_at   DateTime @default(now())
}

model Notification {
  id           String @id @default(cuid())
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  message      String
  read         Boolean @default(false)
  created_at   DateTime @default(now())
}
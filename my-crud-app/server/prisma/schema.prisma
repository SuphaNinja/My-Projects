// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}



model User {
  id            String   @id @default(cuid())
  firstName     String?
  lastName      String?
  userName      String?
  email         String  @unique
  role          String  @default("USER") // Can be "ADMIN"
  password      String
  Profilemage   String?
  posts         Post[]
  comments      Comment[]
  notifications Notification[]
  likes         Like[]
}

model Post {
  id            String   @id @default(cuid())
  imageUrl      String
  title         String
  description   String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  created_at   DateTime @default(now())
  comments      Comment[]
  likes         Like[]
  image         ImageUpload[]
}

model Comment {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  post         Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId       String
  content      String
  created_at   DateTime @default(now())
}

model Notification {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  message      String
  read         Boolean  @default(false)
  created_at   DateTime @default(now())
}

model Like {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  post         Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId       String
}

model ImageUpload {
  id           String   @id @default(cuid())
  fileName     String
  filePath     String
  post         Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId       String
}
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? // @db.Text
  access_token       String? // @db.Text
  expires_at         Int?
  refresh_token_expires_at Int?
  token_type         String?
  scope              String?
  id_token           String? // @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  firstName     String?
  lastName      String?
  name          String?
  image         String?
  password      String?
  adress        String?
  email         String   @unique
  emailVerified DateTime?
  players       Player[]
  following     Follow[] @relation("following")
  followed      Follow[] @relation("followed")
  accounts      Account[]
  sessions      Session[]
}

model Follow {
  id           String @id @default(cuid())
  following    User  @relation("following",fields: [followingId], references: [id], onDelete: Cascade)
  followingId  String
  followed     User  @relation("followed",fields: [followedId], references: [id], onDelete: Cascade)
  followedId   String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model MemoryCards {
  id            String    @id @default(cuid())
  image         String?
  title         String?
  isVisible     Boolean @default(false)
  gameCards     GameCard[]
}

model GameSession {
  id            String       @id @default(cuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  currentTurn   Int          @default(0)
  status        String      @default("pending")
  gameCards     GameCard[]
  players       Player[]

  @@index([createdAt])
}

model GameCard {
  id              String        @id @default(cuid())
  gameSession     GameSession   @relation(fields: [gameSessionId], references: [id], onDelete: Cascade)
  gameSessionId   String
  title           String
  image           String
  memoryCard      MemoryCards   @relation(fields: [memoryCardId], references: [id], onDelete: Cascade)
  memoryCardId    String
  isMatched       Boolean       @default(false)
  isVisible       Boolean       @default(false)
  position        Int           
  foundBy         Player?      @relation(fields: [foundById], references: [id], onDelete: Cascade)
  foundById       String?

  @@unique([gameSessionId, memoryCardId])
  @@index([gameSessionId])
} 

model Player {
  id              String       @id @default(cuid())
  gameSession     GameSession  @relation(fields: [gameSessionId], references: [id], onDelete: Cascade)
  gameSessionId   String
  user            User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  name            String
  points          Int          @default(0)
  foundCards      GameCard[]
}



